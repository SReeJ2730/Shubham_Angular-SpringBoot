package com.dao;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import com.model.Customer;
import com.model.CustomerOtp;
import com.twilio.rest.api.v2010.account.Message;
import com.twilio.type.PhoneNumber;

@Service
public class CustomerDao {

	@Autowired
	CustomerRepository customerRepository;
	@Autowired
	JavaMailSender mailSender;
	@Autowired
	CustomerOtp customerOtp;
  
	HashMap<String,String> Hm = new HashMap<String, String>();

	
	
	public List<Customer> getCustomers(){
		return customerRepository.findAll();
	}

	
	public Customer getCustomerByName(String fname,String lname){
		return customerRepository.findByName(fname,lname);
	}
	
	public Customer deleteByName(String fname,String lname){
		return customerRepository.deleteByName(fname,lname);
	}
	
	public Customer findByemailId(String emailId){
		return customerRepository.findByEmailId(emailId);
		
	}
	public Customer findById(int id){
		return customerRepository.findById(id);
		
	}

	public void registerCustomer(Customer customer){
		BCryptPasswordEncoder bcpe = new BCryptPasswordEncoder();
		String encryptPwd = bcpe.encode(customer.getPassword());
		customer.setPassword(encryptPwd);
		customerRepository.save(customer);
	}

	public void updateCustomer(Customer customer){
		BCryptPasswordEncoder bcpe = new BCryptPasswordEncoder();
		String encryptPwd = bcpe.encode(customer.getPassword());
		customer.setPassword(encryptPwd);
		customerRepository.save(customer);
	}


	public Customer getCustomerByEmailId(String emailId){
		return customerRepository.findByEmailId(emailId);
	}
	
	public Customer cLogin(String emailId,String password){
		return customerRepository.cLogin(emailId,password);
	}

	public void generateEmailOtp2(Customer cust){
		int otp = (int) (Math.random() * 900000) + 100000;
		LocalDateTime expiryTime = LocalDateTime.now().plusMinutes(1);
		customerOtp.setEmailOtp(otp);
		customerOtp.setEmailOtpExpiryTime(expiryTime);
		SimpleMailMessage message = new SimpleMailMessage();
		message.setTo(cust.getEmailId());
		message.setSubject("Your OTP Code");
		message.setText("Your OTP code is " + otp);

		mailSender.send(message);
	}



	public Customer getStudentByPhoneNo(String phoneNo) {
		return customerRepository.findByPhoneNo(phoneNo);
	}

	public void generatePhoneOtp(Customer cust) {
		int otp = (int) (Math.random() * 9000) + 1000;
		LocalDateTime expiryTime = LocalDateTime.now().plusMinutes(1);
		customerOtp.setPhoneOtp(otp);
		customerOtp.setPhoneOtpExpiryTime(expiryTime);
		Message.creator(new PhoneNumber(cust.getPhoneNo()), new PhoneNumber("+19374513949"), "Hello " + cust.getFirstName()+ ", Your Student OTP is : " + otp + "\n\nOTP generated By Co Events \nFrom Event organiser").create();
	}

	public boolean validatePhoneOtp(String phoneNo, int otp) {

		Customer stud = customerRepository.findByPhoneNo(phoneNo);
		if(stud != null){
			if(customerOtp.getPhoneOtp() == otp && customerOtp.getPhoneOtpExpiryTime().isAfter(LocalDateTime.now())){
				customerOtp.setPhoneOtp(0);
				customerOtp.setPhoneOtpExpiryTime(null);
				return true;
			}
		}
		return false;
	}
	public void generateEmailOtp(Customer cust){
		int otp = (int) (Math.random() * 900000) + 100000;
		LocalDateTime expiryTime = LocalDateTime.now().plusMinutes(1);
		customerOtp.setEmailOtp(otp);
		customerOtp.setEmailOtpExpiryTime(expiryTime);
		SimpleMailMessage message = new SimpleMailMessage();
		message.setTo(cust.getEmailId());
		message.setSubject("Your OTP Code");
		message.setText("Your OTP code is " + otp);

		mailSender.send(message);
	}
	public boolean CheckOtp(String otp, String email){
		if (Hm.containsKey(email)){
			if (Hm.get(email).equals(otp)){
				Hm.remove(email);
				return true;
			}
		}
		return false;
	}
	public void AddHm (String email, String Otp){
		System.out.println("hear"+email+" "+Otp);
		Hm.put(email, Otp);
	}
	public boolean generateOTP(String emailId) {

		Customer user = customerRepository.findByEmailId(emailId);
		if(user != null){

			Random random = new Random();
			int otp = 100000 + random.nextInt(900000);			
			LocalDateTime time = LocalDateTime.now().plusMinutes(2);
			
			customerOtp.setEmailOtp(otp);
			customerOtp.setEmailOtpExpiryTime(time);
			
			SimpleMailMessage msg = new SimpleMailMessage();

			msg.setTo(emailId);
			msg.setSubject("One Time Password");
			msg.setText("your otp is : "+otp);
			
			mailSender.send(msg);
			return true;

		}
			return false;
		
	}
	
	public boolean validateEmailOtp(String emailId, int otp) {
		Customer user = customerRepository.findByEmailId(emailId);
		if(user != null) {
			if(customerOtp.getEmailOtp() == otp && customerOtp.getEmailOtpExpiryTime().isAfter(LocalDateTime.now())) {
				customerOtp.setEmailOtp(0);
				customerOtp.setEmailOtpExpiryTime(null);
				return true;
			}
		}
		return false;
	}
	public Customer customerUpdate(String emailId,String password){
		BCryptPasswordEncoder bcpe = new BCryptPasswordEncoder();
		Customer customer=customerRepository.findByEmailId(emailId);
		customer.setPassword(bcpe.encode(password));
		customerRepository.save(customer);
		return customer;
		
		
	}

}